// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xlb.proto

#ifndef PROTOBUF_xlb_2eproto__INCLUDED
#define PROTOBUF_xlb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace xlb {
namespace rpc {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_xlb_2eproto();
void protobuf_AssignDesc_xlb_2eproto();
void protobuf_ShutdownFile_xlb_2eproto();

class EmptyRequest;
class Error;
class GeneralResponse;
class RealServiceRequest;
class Service;
class ServicesResponse;
class VirtualServiceRequest;

// ===================================================================

class Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.Error) */ {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  inline Error* New() const { return New(NULL); }

  Error* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // required string errmsg = 2;
  bool has_errmsg() const;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:xlb.rpc.Error)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 code_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class EmptyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.EmptyRequest) */ {
 public:
  EmptyRequest();
  virtual ~EmptyRequest();

  EmptyRequest(const EmptyRequest& from);

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyRequest& default_instance();

  void Swap(EmptyRequest* other);

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const { return New(NULL); }

  EmptyRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmptyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:xlb.rpc.EmptyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static EmptyRequest* default_instance_;
};
// -------------------------------------------------------------------

class GeneralResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.GeneralResponse) */ {
 public:
  GeneralResponse();
  virtual ~GeneralResponse();

  GeneralResponse(const GeneralResponse& from);

  inline GeneralResponse& operator=(const GeneralResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralResponse& default_instance();

  void Swap(GeneralResponse* other);

  // implements Message ----------------------------------------------

  inline GeneralResponse* New() const { return New(NULL); }

  GeneralResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralResponse& from);
  void MergeFrom(const GeneralResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GeneralResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xlb.rpc.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::xlb::rpc::Error& error() const;
  ::xlb::rpc::Error* mutable_error();
  ::xlb::rpc::Error* release_error();
  void set_allocated_error(::xlb::rpc::Error* error);

  // @@protoc_insertion_point(class_scope:xlb.rpc.GeneralResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xlb::rpc::Error* error_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static GeneralResponse* default_instance_;
};
// -------------------------------------------------------------------

class Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  void Swap(Service* other);

  // implements Message ----------------------------------------------

  inline Service* New() const { return New(NULL); }

  Service* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string addr = 1;
  bool has_addr() const;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // required uint32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:xlb.rpc.Service)
 private:
  inline void set_has_addr();
  inline void clear_has_addr();
  inline void set_has_port();
  inline void clear_has_port();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 port_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static Service* default_instance_;
};
// -------------------------------------------------------------------

class VirtualServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.VirtualServiceRequest) */ {
 public:
  VirtualServiceRequest();
  virtual ~VirtualServiceRequest();

  VirtualServiceRequest(const VirtualServiceRequest& from);

  inline VirtualServiceRequest& operator=(const VirtualServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VirtualServiceRequest& default_instance();

  void Swap(VirtualServiceRequest* other);

  // implements Message ----------------------------------------------

  inline VirtualServiceRequest* New() const { return New(NULL); }

  VirtualServiceRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VirtualServiceRequest& from);
  void MergeFrom(const VirtualServiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VirtualServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xlb.rpc.Service svc = 1;
  bool has_svc() const;
  void clear_svc();
  static const int kSvcFieldNumber = 1;
  const ::xlb::rpc::Service& svc() const;
  ::xlb::rpc::Service* mutable_svc();
  ::xlb::rpc::Service* release_svc();
  void set_allocated_svc(::xlb::rpc::Service* svc);

  // @@protoc_insertion_point(class_scope:xlb.rpc.VirtualServiceRequest)
 private:
  inline void set_has_svc();
  inline void clear_has_svc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xlb::rpc::Service* svc_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static VirtualServiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class RealServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.RealServiceRequest) */ {
 public:
  RealServiceRequest();
  virtual ~RealServiceRequest();

  RealServiceRequest(const RealServiceRequest& from);

  inline RealServiceRequest& operator=(const RealServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RealServiceRequest& default_instance();

  void Swap(RealServiceRequest* other);

  // implements Message ----------------------------------------------

  inline RealServiceRequest* New() const { return New(NULL); }

  RealServiceRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RealServiceRequest& from);
  void MergeFrom(const RealServiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RealServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xlb.rpc.Service virt = 1;
  bool has_virt() const;
  void clear_virt();
  static const int kVirtFieldNumber = 1;
  const ::xlb::rpc::Service& virt() const;
  ::xlb::rpc::Service* mutable_virt();
  ::xlb::rpc::Service* release_virt();
  void set_allocated_virt(::xlb::rpc::Service* virt);

  // required .xlb.rpc.Service real = 2;
  bool has_real() const;
  void clear_real();
  static const int kRealFieldNumber = 2;
  const ::xlb::rpc::Service& real() const;
  ::xlb::rpc::Service* mutable_real();
  ::xlb::rpc::Service* release_real();
  void set_allocated_real(::xlb::rpc::Service* real);

  // @@protoc_insertion_point(class_scope:xlb.rpc.RealServiceRequest)
 private:
  inline void set_has_virt();
  inline void clear_has_virt();
  inline void set_has_real();
  inline void clear_has_real();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xlb::rpc::Service* virt_;
  ::xlb::rpc::Service* real_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static RealServiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServicesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:xlb.rpc.ServicesResponse) */ {
 public:
  ServicesResponse();
  virtual ~ServicesResponse();

  ServicesResponse(const ServicesResponse& from);

  inline ServicesResponse& operator=(const ServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServicesResponse& default_instance();

  void Swap(ServicesResponse* other);

  // implements Message ----------------------------------------------

  inline ServicesResponse* New() const { return New(NULL); }

  ServicesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServicesResponse& from);
  void MergeFrom(const ServicesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServicesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .xlb.rpc.Error error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::xlb::rpc::Error& error() const;
  ::xlb::rpc::Error* mutable_error();
  ::xlb::rpc::Error* release_error();
  void set_allocated_error(::xlb::rpc::Error* error);

  // repeated .xlb.rpc.Service list = 2;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 2;
  const ::xlb::rpc::Service& list(int index) const;
  ::xlb::rpc::Service* mutable_list(int index);
  ::xlb::rpc::Service* add_list();
  ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >*
      mutable_list();
  const ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >&
      list() const;

  // @@protoc_insertion_point(class_scope:xlb.rpc.ServicesResponse)
 private:
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::xlb::rpc::Error* error_;
  ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service > list_;
  friend void  protobuf_AddDesc_xlb_2eproto();
  friend void protobuf_AssignDesc_xlb_2eproto();
  friend void protobuf_ShutdownFile_xlb_2eproto();

  void InitAsDefaultInstance();
  static ServicesResponse* default_instance_;
};
// ===================================================================

class Control_Stub;

class Control : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Control() {};
 public:
  virtual ~Control();

  typedef Control_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void AddVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ListVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::EmptyRequest* request,
                       ::xlb::rpc::ServicesResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AttachRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::RealServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DetachRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::RealServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ListRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::ServicesResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Control);
};

class Control_Stub : public Control {
 public:
  Control_Stub(::google::protobuf::RpcChannel* channel);
  Control_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Control_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Control ------------------------------------------

  void AddVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DelVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ListVirtualService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::EmptyRequest* request,
                       ::xlb::rpc::ServicesResponse* response,
                       ::google::protobuf::Closure* done);
  void AttachRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::RealServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DetachRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::RealServiceRequest* request,
                       ::xlb::rpc::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ListRealService(::google::protobuf::RpcController* controller,
                       const ::xlb::rpc::VirtualServiceRequest* request,
                       ::xlb::rpc::ServicesResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Control_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// required int32 code = 1;
inline bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Error.code)
  return code_;
}
inline void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:xlb.rpc.Error.code)
}

// required string errmsg = 2;
inline bool Error::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
inline const ::std::string& Error::errmsg() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Error.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xlb.rpc.Error.errmsg)
}
inline void Error::set_errmsg(const char* value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xlb.rpc.Error.errmsg)
}
inline void Error::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xlb.rpc.Error.errmsg)
}
inline ::std::string* Error::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:xlb.rpc.Error.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Error::release_errmsg() {
  // @@protoc_insertion_point(field_release:xlb.rpc.Error.errmsg)
  clear_has_errmsg();
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Error::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.Error.errmsg)
}

// -------------------------------------------------------------------

// EmptyRequest

// -------------------------------------------------------------------

// GeneralResponse

// required .xlb.rpc.Error error = 1;
inline bool GeneralResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralResponse::clear_error() {
  if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  clear_has_error();
}
inline const ::xlb::rpc::Error& GeneralResponse::error() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.GeneralResponse.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::xlb::rpc::Error* GeneralResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::xlb::rpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.GeneralResponse.error)
  return error_;
}
inline ::xlb::rpc::Error* GeneralResponse::release_error() {
  // @@protoc_insertion_point(field_release:xlb.rpc.GeneralResponse.error)
  clear_has_error();
  ::xlb::rpc::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void GeneralResponse::set_allocated_error(::xlb::rpc::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.GeneralResponse.error)
}

// -------------------------------------------------------------------

// Service

// required string addr = 1;
inline bool Service::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Service::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Service::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Service::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
inline const ::std::string& Service::addr() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Service.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xlb.rpc.Service.addr)
}
inline void Service::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xlb.rpc.Service.addr)
}
inline void Service::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xlb.rpc.Service.addr)
}
inline ::std::string* Service::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:xlb.rpc.Service.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_addr() {
  // @@protoc_insertion_point(field_release:xlb.rpc.Service.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.Service.addr)
}

// required uint32 port = 2;
inline bool Service::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Service::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Service::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Service::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 Service::port() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Service.port)
  return port_;
}
inline void Service::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:xlb.rpc.Service.port)
}

// -------------------------------------------------------------------

// VirtualServiceRequest

// required .xlb.rpc.Service svc = 1;
inline bool VirtualServiceRequest::has_svc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VirtualServiceRequest::set_has_svc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VirtualServiceRequest::clear_has_svc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VirtualServiceRequest::clear_svc() {
  if (svc_ != NULL) svc_->::xlb::rpc::Service::Clear();
  clear_has_svc();
}
inline const ::xlb::rpc::Service& VirtualServiceRequest::svc() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.VirtualServiceRequest.svc)
  return svc_ != NULL ? *svc_ : *default_instance_->svc_;
}
inline ::xlb::rpc::Service* VirtualServiceRequest::mutable_svc() {
  set_has_svc();
  if (svc_ == NULL) {
    svc_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.VirtualServiceRequest.svc)
  return svc_;
}
inline ::xlb::rpc::Service* VirtualServiceRequest::release_svc() {
  // @@protoc_insertion_point(field_release:xlb.rpc.VirtualServiceRequest.svc)
  clear_has_svc();
  ::xlb::rpc::Service* temp = svc_;
  svc_ = NULL;
  return temp;
}
inline void VirtualServiceRequest::set_allocated_svc(::xlb::rpc::Service* svc) {
  delete svc_;
  svc_ = svc;
  if (svc) {
    set_has_svc();
  } else {
    clear_has_svc();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.VirtualServiceRequest.svc)
}

// -------------------------------------------------------------------

// RealServiceRequest

// required .xlb.rpc.Service virt = 1;
inline bool RealServiceRequest::has_virt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RealServiceRequest::set_has_virt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RealServiceRequest::clear_has_virt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RealServiceRequest::clear_virt() {
  if (virt_ != NULL) virt_->::xlb::rpc::Service::Clear();
  clear_has_virt();
}
inline const ::xlb::rpc::Service& RealServiceRequest::virt() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.RealServiceRequest.virt)
  return virt_ != NULL ? *virt_ : *default_instance_->virt_;
}
inline ::xlb::rpc::Service* RealServiceRequest::mutable_virt() {
  set_has_virt();
  if (virt_ == NULL) {
    virt_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.RealServiceRequest.virt)
  return virt_;
}
inline ::xlb::rpc::Service* RealServiceRequest::release_virt() {
  // @@protoc_insertion_point(field_release:xlb.rpc.RealServiceRequest.virt)
  clear_has_virt();
  ::xlb::rpc::Service* temp = virt_;
  virt_ = NULL;
  return temp;
}
inline void RealServiceRequest::set_allocated_virt(::xlb::rpc::Service* virt) {
  delete virt_;
  virt_ = virt;
  if (virt) {
    set_has_virt();
  } else {
    clear_has_virt();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.RealServiceRequest.virt)
}

// required .xlb.rpc.Service real = 2;
inline bool RealServiceRequest::has_real() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RealServiceRequest::set_has_real() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RealServiceRequest::clear_has_real() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RealServiceRequest::clear_real() {
  if (real_ != NULL) real_->::xlb::rpc::Service::Clear();
  clear_has_real();
}
inline const ::xlb::rpc::Service& RealServiceRequest::real() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.RealServiceRequest.real)
  return real_ != NULL ? *real_ : *default_instance_->real_;
}
inline ::xlb::rpc::Service* RealServiceRequest::mutable_real() {
  set_has_real();
  if (real_ == NULL) {
    real_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.RealServiceRequest.real)
  return real_;
}
inline ::xlb::rpc::Service* RealServiceRequest::release_real() {
  // @@protoc_insertion_point(field_release:xlb.rpc.RealServiceRequest.real)
  clear_has_real();
  ::xlb::rpc::Service* temp = real_;
  real_ = NULL;
  return temp;
}
inline void RealServiceRequest::set_allocated_real(::xlb::rpc::Service* real) {
  delete real_;
  real_ = real;
  if (real) {
    set_has_real();
  } else {
    clear_has_real();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.RealServiceRequest.real)
}

// -------------------------------------------------------------------

// ServicesResponse

// required .xlb.rpc.Error error = 1;
inline bool ServicesResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServicesResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServicesResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServicesResponse::clear_error() {
  if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  clear_has_error();
}
inline const ::xlb::rpc::Error& ServicesResponse::error() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.ServicesResponse.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::xlb::rpc::Error* ServicesResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::xlb::rpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.ServicesResponse.error)
  return error_;
}
inline ::xlb::rpc::Error* ServicesResponse::release_error() {
  // @@protoc_insertion_point(field_release:xlb.rpc.ServicesResponse.error)
  clear_has_error();
  ::xlb::rpc::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void ServicesResponse::set_allocated_error(::xlb::rpc::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.ServicesResponse.error)
}

// repeated .xlb.rpc.Service list = 2;
inline int ServicesResponse::list_size() const {
  return list_.size();
}
inline void ServicesResponse::clear_list() {
  list_.Clear();
}
inline const ::xlb::rpc::Service& ServicesResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:xlb.rpc.ServicesResponse.list)
  return list_.Get(index);
}
inline ::xlb::rpc::Service* ServicesResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:xlb.rpc.ServicesResponse.list)
  return list_.Mutable(index);
}
inline ::xlb::rpc::Service* ServicesResponse::add_list() {
  // @@protoc_insertion_point(field_add:xlb.rpc.ServicesResponse.list)
  return list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >*
ServicesResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:xlb.rpc.ServicesResponse.list)
  return &list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >&
ServicesResponse::list() const {
  // @@protoc_insertion_point(field_list:xlb.rpc.ServicesResponse.list)
  return list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace xlb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_xlb_2eproto__INCLUDED
