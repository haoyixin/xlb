// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xlb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "xlb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xlb {
namespace rpc {

namespace {

const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* VirtualServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RealServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RealServiceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServicesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServicesResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Control_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_xlb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_xlb_2eproto() {
  protobuf_AddDesc_xlb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "xlb.proto");
  GOOGLE_CHECK(file != NULL);
  Error_descriptor_ = file->message_type(0);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errmsg_),
  };
  Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      -1,
      -1,
      sizeof(Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
      -1);
  EmptyRequest_descriptor_ = file->message_type(1);
  static const int EmptyRequest_offsets_[1] = {
  };
  EmptyRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmptyRequest_descriptor_,
      EmptyRequest::default_instance_,
      EmptyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmptyRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyRequest, _internal_metadata_),
      -1);
  GeneralResponse_descriptor_ = file->message_type(2);
  static const int GeneralResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, error_),
  };
  GeneralResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GeneralResponse_descriptor_,
      GeneralResponse::default_instance_,
      GeneralResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(GeneralResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralResponse, _internal_metadata_),
      -1);
  Service_descriptor_ = file->message_type(3);
  static const int Service_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, port_),
  };
  Service_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _has_bits_[0]),
      -1,
      -1,
      sizeof(Service),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _internal_metadata_),
      -1);
  VirtualServiceRequest_descriptor_ = file->message_type(4);
  static const int VirtualServiceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualServiceRequest, svc_),
  };
  VirtualServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VirtualServiceRequest_descriptor_,
      VirtualServiceRequest::default_instance_,
      VirtualServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualServiceRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(VirtualServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualServiceRequest, _internal_metadata_),
      -1);
  RealServiceRequest_descriptor_ = file->message_type(5);
  static const int RealServiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealServiceRequest, virt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealServiceRequest, real_),
  };
  RealServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RealServiceRequest_descriptor_,
      RealServiceRequest::default_instance_,
      RealServiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealServiceRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RealServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RealServiceRequest, _internal_metadata_),
      -1);
  ServicesResponse_descriptor_ = file->message_type(6);
  static const int ServicesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicesResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicesResponse, list_),
  };
  ServicesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServicesResponse_descriptor_,
      ServicesResponse::default_instance_,
      ServicesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicesResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(ServicesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServicesResponse, _internal_metadata_),
      -1);
  Control_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_xlb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyRequest_descriptor_, &EmptyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GeneralResponse_descriptor_, &GeneralResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VirtualServiceRequest_descriptor_, &VirtualServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RealServiceRequest_descriptor_, &RealServiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServicesResponse_descriptor_, &ServicesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_xlb_2eproto() {
  delete Error::default_instance_;
  delete Error_reflection_;
  delete EmptyRequest::default_instance_;
  delete EmptyRequest_reflection_;
  delete GeneralResponse::default_instance_;
  delete GeneralResponse_reflection_;
  delete Service::default_instance_;
  delete Service_reflection_;
  delete VirtualServiceRequest::default_instance_;
  delete VirtualServiceRequest_reflection_;
  delete RealServiceRequest::default_instance_;
  delete RealServiceRequest_reflection_;
  delete ServicesResponse::default_instance_;
  delete ServicesResponse_reflection_;
}

void protobuf_AddDesc_xlb_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_xlb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\txlb.proto\022\007xlb.rpc\"%\n\005Error\022\014\n\004code\030\001 "
    "\002(\005\022\016\n\006errmsg\030\002 \002(\t\"\016\n\014EmptyRequest\"0\n\017G"
    "eneralResponse\022\035\n\005error\030\001 \002(\0132\016.xlb.rpc."
    "Error\"%\n\007Service\022\014\n\004addr\030\001 \002(\t\022\014\n\004port\030\002"
    " \002(\r\"6\n\025VirtualServiceRequest\022\035\n\003svc\030\001 \002"
    "(\0132\020.xlb.rpc.Service\"T\n\022RealServiceReque"
    "st\022\036\n\004virt\030\001 \002(\0132\020.xlb.rpc.Service\022\036\n\004re"
    "al\030\002 \002(\0132\020.xlb.rpc.Service\"Q\n\020ServicesRe"
    "sponse\022\035\n\005error\030\001 \002(\0132\016.xlb.rpc.Error\022\036\n"
    "\004list\030\002 \003(\0132\020.xlb.rpc.Service2\325\003\n\007Contro"
    "l\022M\n\021AddVirtualService\022\036.xlb.rpc.Virtual"
    "ServiceRequest\032\030.xlb.rpc.GeneralResponse"
    "\022M\n\021DelVirtualService\022\036.xlb.rpc.VirtualS"
    "erviceRequest\032\030.xlb.rpc.GeneralResponse\022"
    "F\n\022ListVirtualService\022\025.xlb.rpc.EmptyReq"
    "uest\032\031.xlb.rpc.ServicesResponse\022J\n\021Attac"
    "hRealService\022\033.xlb.rpc.RealServiceReques"
    "t\032\030.xlb.rpc.GeneralResponse\022J\n\021DetachRea"
    "lService\022\033.xlb.rpc.RealServiceRequest\032\030."
    "xlb.rpc.GeneralResponse\022L\n\017ListRealServi"
    "ce\022\036.xlb.rpc.VirtualServiceRequest\032\031.xlb"
    ".rpc.ServicesResponseB\003\200\001\001", 866);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "xlb.proto", &protobuf_RegisterTypes);
  Error::default_instance_ = new Error();
  EmptyRequest::default_instance_ = new EmptyRequest();
  GeneralResponse::default_instance_ = new GeneralResponse();
  Service::default_instance_ = new Service();
  VirtualServiceRequest::default_instance_ = new VirtualServiceRequest();
  RealServiceRequest::default_instance_ = new RealServiceRequest();
  ServicesResponse::default_instance_ = new ServicesResponse();
  Error::default_instance_->InitAsDefaultInstance();
  EmptyRequest::default_instance_->InitAsDefaultInstance();
  GeneralResponse::default_instance_->InitAsDefaultInstance();
  Service::default_instance_->InitAsDefaultInstance();
  VirtualServiceRequest::default_instance_->InitAsDefaultInstance();
  RealServiceRequest::default_instance_->InitAsDefaultInstance();
  ServicesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_xlb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_xlb_2eproto {
  StaticDescriptorInitializer_xlb_2eproto() {
    protobuf_AddDesc_xlb_2eproto();
  }
} static_descriptor_initializer_xlb_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.Error)
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.Error)
}

void Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:xlb.rpc.Error)
  SharedDtor();
}

void Error::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.Error)
  if (_has_bits_[0 / 32] & 3u) {
    code_ = 0;
    if (has_errmsg()) {
      errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }

      // required string errmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xlb.rpc.Error.errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.Error)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xlb.rpc.Error.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.Error)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xlb.rpc.Error.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.Error)
  return target;
}

int Error::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:xlb.rpc.Error)
  int total_size = 0;

  if (has_code()) {
    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  if (has_errmsg()) {
    // required string errmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  return total_size;
}
int Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.Error)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 code = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());

    // required string errmsg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_errmsg()) {
      set_has_errmsg();
      errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  std::swap(code_, other->code_);
  errmsg_.Swap(&other->errmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// required int32 code = 1;
bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
 ::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Error.code)
  return code_;
}
 void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:xlb.rpc.Error.code)
}

// required string errmsg = 2;
bool Error::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_errmsg();
}
 const ::std::string& Error::errmsg() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Error.errmsg)
  return errmsg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xlb.rpc.Error.errmsg)
}
 void Error::set_errmsg(const char* value) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xlb.rpc.Error.errmsg)
}
 void Error::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xlb.rpc.Error.errmsg)
}
 ::std::string* Error::mutable_errmsg() {
  set_has_errmsg();
  // @@protoc_insertion_point(field_mutable:xlb.rpc.Error.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Error::release_errmsg() {
  // @@protoc_insertion_point(field_release:xlb.rpc.Error.errmsg)
  clear_has_errmsg();
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Error::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    set_has_errmsg();
  } else {
    clear_has_errmsg();
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.Error.errmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyRequest::EmptyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.EmptyRequest)
}

void EmptyRequest::InitAsDefaultInstance() {
}

EmptyRequest::EmptyRequest(const EmptyRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.EmptyRequest)
}

void EmptyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyRequest::~EmptyRequest() {
  // @@protoc_insertion_point(destructor:xlb.rpc.EmptyRequest)
  SharedDtor();
}

void EmptyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyRequest_descriptor_;
}

const EmptyRequest& EmptyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

EmptyRequest* EmptyRequest::default_instance_ = NULL;

EmptyRequest* EmptyRequest::New(::google::protobuf::Arena* arena) const {
  EmptyRequest* n = new EmptyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.EmptyRequest)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.EmptyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.EmptyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.EmptyRequest)
  return false;
#undef DO_
}

void EmptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.EmptyRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.EmptyRequest)
}

::google::protobuf::uint8* EmptyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.EmptyRequest)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.EmptyRequest)
  return target;
}

int EmptyRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.EmptyRequest)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.EmptyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmptyRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.EmptyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.EmptyRequest)
    MergeFrom(*source);
  }
}

void EmptyRequest::MergeFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.EmptyRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmptyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyRequest::CopyFrom(const EmptyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.EmptyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyRequest::IsInitialized() const {

  return true;
}

void EmptyRequest::Swap(EmptyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyRequest::InternalSwap(EmptyRequest* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyRequest_descriptor_;
  metadata.reflection = EmptyRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GeneralResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GeneralResponse::GeneralResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.GeneralResponse)
}

void GeneralResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::xlb::rpc::Error*>(&::xlb::rpc::Error::default_instance());
}

GeneralResponse::GeneralResponse(const GeneralResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.GeneralResponse)
}

void GeneralResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralResponse::~GeneralResponse() {
  // @@protoc_insertion_point(destructor:xlb.rpc.GeneralResponse)
  SharedDtor();
}

void GeneralResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void GeneralResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralResponse_descriptor_;
}

const GeneralResponse& GeneralResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

GeneralResponse* GeneralResponse::default_instance_ = NULL;

GeneralResponse* GeneralResponse::New(::google::protobuf::Arena* arena) const {
  GeneralResponse* n = new GeneralResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GeneralResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.GeneralResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GeneralResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.GeneralResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xlb.rpc.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.GeneralResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.GeneralResponse)
  return false;
#undef DO_
}

void GeneralResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.GeneralResponse)
  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.GeneralResponse)
}

::google::protobuf::uint8* GeneralResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.GeneralResponse)
  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.GeneralResponse)
  return target;
}

int GeneralResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.GeneralResponse)
  int total_size = 0;

  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.GeneralResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GeneralResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GeneralResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.GeneralResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.GeneralResponse)
    MergeFrom(*source);
  }
}

void GeneralResponse::MergeFrom(const GeneralResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.GeneralResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::xlb::rpc::Error::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GeneralResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.GeneralResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralResponse::CopyFrom(const GeneralResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.GeneralResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void GeneralResponse::Swap(GeneralResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GeneralResponse::InternalSwap(GeneralResponse* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GeneralResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralResponse_descriptor_;
  metadata.reflection = GeneralResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GeneralResponse

// required .xlb.rpc.Error error = 1;
bool GeneralResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GeneralResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void GeneralResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void GeneralResponse::clear_error() {
  if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  clear_has_error();
}
const ::xlb::rpc::Error& GeneralResponse::error() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.GeneralResponse.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::xlb::rpc::Error* GeneralResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::xlb::rpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.GeneralResponse.error)
  return error_;
}
::xlb::rpc::Error* GeneralResponse::release_error() {
  // @@protoc_insertion_point(field_release:xlb.rpc.GeneralResponse.error)
  clear_has_error();
  ::xlb::rpc::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void GeneralResponse::set_allocated_error(::xlb::rpc::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.GeneralResponse.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service::kAddrFieldNumber;
const int Service::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service::Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.Service)
}

void Service::InitAsDefaultInstance() {
}

Service::Service(const Service& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.Service)
}

void Service::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:xlb.rpc.Service)
  SharedDtor();
}

void Service::SharedDtor() {
  addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New(::google::protobuf::Arena* arena) const {
  Service* n = new Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.Service)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_addr()) {
      addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "xlb.rpc.Service.addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.Service)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xlb.rpc.Service.addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addr(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.Service)
}

::google::protobuf::uint8* Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.Service)
  // required string addr = 1;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "xlb.rpc.Service.addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addr(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.Service)
  return target;
}

int Service::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:xlb.rpc.Service)
  int total_size = 0;

  if (has_addr()) {
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());
  }

  if (has_port()) {
    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  return total_size;
}
int Service::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.Service)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string addr = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addr());

    // required uint32 port = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Service* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addr()) {
      set_has_addr();
      addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addr_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Service::Swap(Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service::InternalSwap(Service* other) {
  addr_.Swap(&other->addr_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service

// required string addr = 1;
bool Service::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Service::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void Service::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void Service::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addr();
}
 const ::std::string& Service::addr() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Service.addr)
  return addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_addr(const ::std::string& value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:xlb.rpc.Service.addr)
}
 void Service::set_addr(const char* value) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:xlb.rpc.Service.addr)
}
 void Service::set_addr(const char* value, size_t size) {
  set_has_addr();
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:xlb.rpc.Service.addr)
}
 ::std::string* Service::mutable_addr() {
  set_has_addr();
  // @@protoc_insertion_point(field_mutable:xlb.rpc.Service.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_addr() {
  // @@protoc_insertion_point(field_release:xlb.rpc.Service.addr)
  clear_has_addr();
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.Service.addr)
}

// required uint32 port = 2;
bool Service::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Service::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Service::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Service::clear_port() {
  port_ = 0u;
  clear_has_port();
}
 ::google::protobuf::uint32 Service::port() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.Service.port)
  return port_;
}
 void Service::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:xlb.rpc.Service.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualServiceRequest::kSvcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualServiceRequest::VirtualServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.VirtualServiceRequest)
}

void VirtualServiceRequest::InitAsDefaultInstance() {
  svc_ = const_cast< ::xlb::rpc::Service*>(&::xlb::rpc::Service::default_instance());
}

VirtualServiceRequest::VirtualServiceRequest(const VirtualServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.VirtualServiceRequest)
}

void VirtualServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  svc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VirtualServiceRequest::~VirtualServiceRequest() {
  // @@protoc_insertion_point(destructor:xlb.rpc.VirtualServiceRequest)
  SharedDtor();
}

void VirtualServiceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete svc_;
  }
}

void VirtualServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualServiceRequest_descriptor_;
}

const VirtualServiceRequest& VirtualServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

VirtualServiceRequest* VirtualServiceRequest::default_instance_ = NULL;

VirtualServiceRequest* VirtualServiceRequest::New(::google::protobuf::Arena* arena) const {
  VirtualServiceRequest* n = new VirtualServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.VirtualServiceRequest)
  if (has_svc()) {
    if (svc_ != NULL) svc_->::xlb::rpc::Service::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VirtualServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.VirtualServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xlb.rpc.Service svc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_svc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.VirtualServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.VirtualServiceRequest)
  return false;
#undef DO_
}

void VirtualServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.VirtualServiceRequest)
  // required .xlb.rpc.Service svc = 1;
  if (has_svc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->svc_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.VirtualServiceRequest)
}

::google::protobuf::uint8* VirtualServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.VirtualServiceRequest)
  // required .xlb.rpc.Service svc = 1;
  if (has_svc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->svc_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.VirtualServiceRequest)
  return target;
}

int VirtualServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.VirtualServiceRequest)
  int total_size = 0;

  // required .xlb.rpc.Service svc = 1;
  if (has_svc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->svc_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.VirtualServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VirtualServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.VirtualServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.VirtualServiceRequest)
    MergeFrom(*source);
  }
}

void VirtualServiceRequest::MergeFrom(const VirtualServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.VirtualServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svc()) {
      mutable_svc()->::xlb::rpc::Service::MergeFrom(from.svc());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VirtualServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.VirtualServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualServiceRequest::CopyFrom(const VirtualServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.VirtualServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_svc()) {
    if (!this->svc_->IsInitialized()) return false;
  }
  return true;
}

void VirtualServiceRequest::Swap(VirtualServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualServiceRequest::InternalSwap(VirtualServiceRequest* other) {
  std::swap(svc_, other->svc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualServiceRequest_descriptor_;
  metadata.reflection = VirtualServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualServiceRequest

// required .xlb.rpc.Service svc = 1;
bool VirtualServiceRequest::has_svc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VirtualServiceRequest::set_has_svc() {
  _has_bits_[0] |= 0x00000001u;
}
void VirtualServiceRequest::clear_has_svc() {
  _has_bits_[0] &= ~0x00000001u;
}
void VirtualServiceRequest::clear_svc() {
  if (svc_ != NULL) svc_->::xlb::rpc::Service::Clear();
  clear_has_svc();
}
const ::xlb::rpc::Service& VirtualServiceRequest::svc() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.VirtualServiceRequest.svc)
  return svc_ != NULL ? *svc_ : *default_instance_->svc_;
}
::xlb::rpc::Service* VirtualServiceRequest::mutable_svc() {
  set_has_svc();
  if (svc_ == NULL) {
    svc_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.VirtualServiceRequest.svc)
  return svc_;
}
::xlb::rpc::Service* VirtualServiceRequest::release_svc() {
  // @@protoc_insertion_point(field_release:xlb.rpc.VirtualServiceRequest.svc)
  clear_has_svc();
  ::xlb::rpc::Service* temp = svc_;
  svc_ = NULL;
  return temp;
}
void VirtualServiceRequest::set_allocated_svc(::xlb::rpc::Service* svc) {
  delete svc_;
  svc_ = svc;
  if (svc) {
    set_has_svc();
  } else {
    clear_has_svc();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.VirtualServiceRequest.svc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealServiceRequest::kVirtFieldNumber;
const int RealServiceRequest::kRealFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealServiceRequest::RealServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.RealServiceRequest)
}

void RealServiceRequest::InitAsDefaultInstance() {
  virt_ = const_cast< ::xlb::rpc::Service*>(&::xlb::rpc::Service::default_instance());
  real_ = const_cast< ::xlb::rpc::Service*>(&::xlb::rpc::Service::default_instance());
}

RealServiceRequest::RealServiceRequest(const RealServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.RealServiceRequest)
}

void RealServiceRequest::SharedCtor() {
  _cached_size_ = 0;
  virt_ = NULL;
  real_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RealServiceRequest::~RealServiceRequest() {
  // @@protoc_insertion_point(destructor:xlb.rpc.RealServiceRequest)
  SharedDtor();
}

void RealServiceRequest::SharedDtor() {
  if (this != default_instance_) {
    delete virt_;
    delete real_;
  }
}

void RealServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RealServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealServiceRequest_descriptor_;
}

const RealServiceRequest& RealServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

RealServiceRequest* RealServiceRequest::default_instance_ = NULL;

RealServiceRequest* RealServiceRequest::New(::google::protobuf::Arena* arena) const {
  RealServiceRequest* n = new RealServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RealServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.RealServiceRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_virt()) {
      if (virt_ != NULL) virt_->::xlb::rpc::Service::Clear();
    }
    if (has_real()) {
      if (real_ != NULL) real_->::xlb::rpc::Service::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RealServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.RealServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xlb.rpc.Service virt = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_real;
        break;
      }

      // required .xlb.rpc.Service real = 2;
      case 2: {
        if (tag == 18) {
         parse_real:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_real()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.RealServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.RealServiceRequest)
  return false;
#undef DO_
}

void RealServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.RealServiceRequest)
  // required .xlb.rpc.Service virt = 1;
  if (has_virt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->virt_, output);
  }

  // required .xlb.rpc.Service real = 2;
  if (has_real()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->real_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.RealServiceRequest)
}

::google::protobuf::uint8* RealServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.RealServiceRequest)
  // required .xlb.rpc.Service virt = 1;
  if (has_virt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->virt_, false, target);
  }

  // required .xlb.rpc.Service real = 2;
  if (has_real()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->real_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.RealServiceRequest)
  return target;
}

int RealServiceRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:xlb.rpc.RealServiceRequest)
  int total_size = 0;

  if (has_virt()) {
    // required .xlb.rpc.Service virt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->virt_);
  }

  if (has_real()) {
    // required .xlb.rpc.Service real = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_);
  }

  return total_size;
}
int RealServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.RealServiceRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .xlb.rpc.Service virt = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->virt_);

    // required .xlb.rpc.Service real = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->real_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RealServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.RealServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RealServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RealServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.RealServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.RealServiceRequest)
    MergeFrom(*source);
  }
}

void RealServiceRequest::MergeFrom(const RealServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.RealServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virt()) {
      mutable_virt()->::xlb::rpc::Service::MergeFrom(from.virt());
    }
    if (from.has_real()) {
      mutable_real()->::xlb::rpc::Service::MergeFrom(from.real());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RealServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.RealServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealServiceRequest::CopyFrom(const RealServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.RealServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealServiceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_virt()) {
    if (!this->virt_->IsInitialized()) return false;
  }
  if (has_real()) {
    if (!this->real_->IsInitialized()) return false;
  }
  return true;
}

void RealServiceRequest::Swap(RealServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealServiceRequest::InternalSwap(RealServiceRequest* other) {
  std::swap(virt_, other->virt_);
  std::swap(real_, other->real_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RealServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RealServiceRequest_descriptor_;
  metadata.reflection = RealServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RealServiceRequest

// required .xlb.rpc.Service virt = 1;
bool RealServiceRequest::has_virt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RealServiceRequest::set_has_virt() {
  _has_bits_[0] |= 0x00000001u;
}
void RealServiceRequest::clear_has_virt() {
  _has_bits_[0] &= ~0x00000001u;
}
void RealServiceRequest::clear_virt() {
  if (virt_ != NULL) virt_->::xlb::rpc::Service::Clear();
  clear_has_virt();
}
const ::xlb::rpc::Service& RealServiceRequest::virt() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.RealServiceRequest.virt)
  return virt_ != NULL ? *virt_ : *default_instance_->virt_;
}
::xlb::rpc::Service* RealServiceRequest::mutable_virt() {
  set_has_virt();
  if (virt_ == NULL) {
    virt_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.RealServiceRequest.virt)
  return virt_;
}
::xlb::rpc::Service* RealServiceRequest::release_virt() {
  // @@protoc_insertion_point(field_release:xlb.rpc.RealServiceRequest.virt)
  clear_has_virt();
  ::xlb::rpc::Service* temp = virt_;
  virt_ = NULL;
  return temp;
}
void RealServiceRequest::set_allocated_virt(::xlb::rpc::Service* virt) {
  delete virt_;
  virt_ = virt;
  if (virt) {
    set_has_virt();
  } else {
    clear_has_virt();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.RealServiceRequest.virt)
}

// required .xlb.rpc.Service real = 2;
bool RealServiceRequest::has_real() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RealServiceRequest::set_has_real() {
  _has_bits_[0] |= 0x00000002u;
}
void RealServiceRequest::clear_has_real() {
  _has_bits_[0] &= ~0x00000002u;
}
void RealServiceRequest::clear_real() {
  if (real_ != NULL) real_->::xlb::rpc::Service::Clear();
  clear_has_real();
}
const ::xlb::rpc::Service& RealServiceRequest::real() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.RealServiceRequest.real)
  return real_ != NULL ? *real_ : *default_instance_->real_;
}
::xlb::rpc::Service* RealServiceRequest::mutable_real() {
  set_has_real();
  if (real_ == NULL) {
    real_ = new ::xlb::rpc::Service;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.RealServiceRequest.real)
  return real_;
}
::xlb::rpc::Service* RealServiceRequest::release_real() {
  // @@protoc_insertion_point(field_release:xlb.rpc.RealServiceRequest.real)
  clear_has_real();
  ::xlb::rpc::Service* temp = real_;
  real_ = NULL;
  return temp;
}
void RealServiceRequest::set_allocated_real(::xlb::rpc::Service* real) {
  delete real_;
  real_ = real;
  if (real) {
    set_has_real();
  } else {
    clear_has_real();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.RealServiceRequest.real)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServicesResponse::kErrorFieldNumber;
const int ServicesResponse::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServicesResponse::ServicesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:xlb.rpc.ServicesResponse)
}

void ServicesResponse::InitAsDefaultInstance() {
  error_ = const_cast< ::xlb::rpc::Error*>(&::xlb::rpc::Error::default_instance());
}

ServicesResponse::ServicesResponse(const ServicesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:xlb.rpc.ServicesResponse)
}

void ServicesResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServicesResponse::~ServicesResponse() {
  // @@protoc_insertion_point(destructor:xlb.rpc.ServicesResponse)
  SharedDtor();
}

void ServicesResponse::SharedDtor() {
  if (this != default_instance_) {
    delete error_;
  }
}

void ServicesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServicesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServicesResponse_descriptor_;
}

const ServicesResponse& ServicesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_xlb_2eproto();
  return *default_instance_;
}

ServicesResponse* ServicesResponse::default_instance_ = NULL;

ServicesResponse* ServicesResponse::New(::google::protobuf::Arena* arena) const {
  ServicesResponse* n = new ServicesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:xlb.rpc.ServicesResponse)
  if (has_error()) {
    if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ServicesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:xlb.rpc.ServicesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .xlb.rpc.Error error = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .xlb.rpc.Service list = 2;
      case 2: {
        if (tag == 18) {
         parse_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:xlb.rpc.ServicesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:xlb.rpc.ServicesResponse)
  return false;
#undef DO_
}

void ServicesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:xlb.rpc.ServicesResponse)
  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->error_, output);
  }

  // repeated .xlb.rpc.Service list = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:xlb.rpc.ServicesResponse)
}

::google::protobuf::uint8* ServicesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:xlb.rpc.ServicesResponse)
  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->error_, false, target);
  }

  // repeated .xlb.rpc.Service list = 2;
  for (unsigned int i = 0, n = this->list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:xlb.rpc.ServicesResponse)
  return target;
}

int ServicesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:xlb.rpc.ServicesResponse)
  int total_size = 0;

  // required .xlb.rpc.Error error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }
  // repeated .xlb.rpc.Service list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServicesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:xlb.rpc.ServicesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServicesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServicesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:xlb.rpc.ServicesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:xlb.rpc.ServicesResponse)
    MergeFrom(*source);
  }
}

void ServicesResponse::MergeFrom(const ServicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:xlb.rpc.ServicesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      mutable_error()->::xlb::rpc::Error::MergeFrom(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ServicesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:xlb.rpc.ServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServicesResponse::CopyFrom(const ServicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:xlb.rpc.ServicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServicesResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->list())) return false;
  return true;
}

void ServicesResponse::Swap(ServicesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServicesResponse::InternalSwap(ServicesResponse* other) {
  std::swap(error_, other->error_);
  list_.UnsafeArenaSwap(&other->list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServicesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServicesResponse_descriptor_;
  metadata.reflection = ServicesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServicesResponse

// required .xlb.rpc.Error error = 1;
bool ServicesResponse::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ServicesResponse::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ServicesResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ServicesResponse::clear_error() {
  if (error_ != NULL) error_->::xlb::rpc::Error::Clear();
  clear_has_error();
}
const ::xlb::rpc::Error& ServicesResponse::error() const {
  // @@protoc_insertion_point(field_get:xlb.rpc.ServicesResponse.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::xlb::rpc::Error* ServicesResponse::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    error_ = new ::xlb::rpc::Error;
  }
  // @@protoc_insertion_point(field_mutable:xlb.rpc.ServicesResponse.error)
  return error_;
}
::xlb::rpc::Error* ServicesResponse::release_error() {
  // @@protoc_insertion_point(field_release:xlb.rpc.ServicesResponse.error)
  clear_has_error();
  ::xlb::rpc::Error* temp = error_;
  error_ = NULL;
  return temp;
}
void ServicesResponse::set_allocated_error(::xlb::rpc::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:xlb.rpc.ServicesResponse.error)
}

// repeated .xlb.rpc.Service list = 2;
int ServicesResponse::list_size() const {
  return list_.size();
}
void ServicesResponse::clear_list() {
  list_.Clear();
}
const ::xlb::rpc::Service& ServicesResponse::list(int index) const {
  // @@protoc_insertion_point(field_get:xlb.rpc.ServicesResponse.list)
  return list_.Get(index);
}
::xlb::rpc::Service* ServicesResponse::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:xlb.rpc.ServicesResponse.list)
  return list_.Mutable(index);
}
::xlb::rpc::Service* ServicesResponse::add_list() {
  // @@protoc_insertion_point(field_add:xlb.rpc.ServicesResponse.list)
  return list_.Add();
}
::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >*
ServicesResponse::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:xlb.rpc.ServicesResponse.list)
  return &list_;
}
const ::google::protobuf::RepeatedPtrField< ::xlb::rpc::Service >&
ServicesResponse::list() const {
  // @@protoc_insertion_point(field_list:xlb.rpc.ServicesResponse.list)
  return list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

Control::~Control() {}

const ::google::protobuf::ServiceDescriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Control::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

void Control::AddVirtualService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::VirtualServiceRequest*,
                         ::xlb::rpc::GeneralResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddVirtualService() not implemented.");
  done->Run();
}

void Control::DelVirtualService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::VirtualServiceRequest*,
                         ::xlb::rpc::GeneralResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DelVirtualService() not implemented.");
  done->Run();
}

void Control::ListVirtualService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::EmptyRequest*,
                         ::xlb::rpc::ServicesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListVirtualService() not implemented.");
  done->Run();
}

void Control::AttachRealService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::RealServiceRequest*,
                         ::xlb::rpc::GeneralResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AttachRealService() not implemented.");
  done->Run();
}

void Control::DetachRealService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::RealServiceRequest*,
                         ::xlb::rpc::GeneralResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DetachRealService() not implemented.");
  done->Run();
}

void Control::ListRealService(::google::protobuf::RpcController* controller,
                         const ::xlb::rpc::VirtualServiceRequest*,
                         ::xlb::rpc::ServicesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ListRealService() not implemented.");
  done->Run();
}

void Control::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Control_descriptor_);
  switch(method->index()) {
    case 0:
      AddVirtualService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::VirtualServiceRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::GeneralResponse*>(response),
             done);
      break;
    case 1:
      DelVirtualService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::VirtualServiceRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::GeneralResponse*>(response),
             done);
      break;
    case 2:
      ListVirtualService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::EmptyRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::ServicesResponse*>(response),
             done);
      break;
    case 3:
      AttachRealService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::RealServiceRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::GeneralResponse*>(response),
             done);
      break;
    case 4:
      DetachRealService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::RealServiceRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::GeneralResponse*>(response),
             done);
      break;
    case 5:
      ListRealService(controller,
             ::google::protobuf::down_cast<const ::xlb::rpc::VirtualServiceRequest*>(request),
             ::google::protobuf::down_cast< ::xlb::rpc::ServicesResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Control::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::xlb::rpc::VirtualServiceRequest::default_instance();
    case 1:
      return ::xlb::rpc::VirtualServiceRequest::default_instance();
    case 2:
      return ::xlb::rpc::EmptyRequest::default_instance();
    case 3:
      return ::xlb::rpc::RealServiceRequest::default_instance();
    case 4:
      return ::xlb::rpc::RealServiceRequest::default_instance();
    case 5:
      return ::xlb::rpc::VirtualServiceRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Control::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::xlb::rpc::GeneralResponse::default_instance();
    case 1:
      return ::xlb::rpc::GeneralResponse::default_instance();
    case 2:
      return ::xlb::rpc::ServicesResponse::default_instance();
    case 3:
      return ::xlb::rpc::GeneralResponse::default_instance();
    case 4:
      return ::xlb::rpc::GeneralResponse::default_instance();
    case 5:
      return ::xlb::rpc::ServicesResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Control_Stub::Control_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Control_Stub::Control_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Control_Stub::~Control_Stub() {
  if (owns_channel_) delete channel_;
}

void Control_Stub::AddVirtualService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::VirtualServiceRequest* request,
                              ::xlb::rpc::GeneralResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Control_Stub::DelVirtualService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::VirtualServiceRequest* request,
                              ::xlb::rpc::GeneralResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Control_Stub::ListVirtualService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::EmptyRequest* request,
                              ::xlb::rpc::ServicesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Control_Stub::AttachRealService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::RealServiceRequest* request,
                              ::xlb::rpc::GeneralResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Control_Stub::DetachRealService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::RealServiceRequest* request,
                              ::xlb::rpc::GeneralResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void Control_Stub::ListRealService(::google::protobuf::RpcController* controller,
                              const ::xlb::rpc::VirtualServiceRequest* request,
                              ::xlb::rpc::ServicesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace xlb

// @@protoc_insertion_point(global_scope)
